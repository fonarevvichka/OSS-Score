plugins:
  - serverless-iam-roles-per-function


service: oss-score-test

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=2.24.0"

provider:
  name: aws
  runtime: go1.x
  stage: dev
  region: us-east-2


# you can define service wide environment variables here
  environment:
    DYNAMODB_TABLE: ${env:DYNAMODB_TABLE}
    SHELF_LIFE: ${env:SHELF_LIFE}

package:
  individually: true
  patterns:
    - '!**'

functions:
  getScore:
    name: ${self:provider.stage}-get-score
    handler: bin/getScore
    iamRoleStatementsName: get-score-role
    iamRoleStatements:
      # - Effect: "Allow"
        # Action:
        #   - sqs:GetQueueUrl
        # Resource: 'arn:aws:sqs:${self:provider.region}:*:${env:REPO_QUERY_QUEUE}'
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem 
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:DYNAMODB_TABLE}'
    package:
      patterns:
        - bin/getScore
        - util/scores
    events:
      - http:
          path: catalog/{catalog}/owner/{owner}/name/{name}/type/{type}
          method: get
          cors: true
          request:
            parameters:
              paths:
                catalog: true
                owner: true
                name: true
                type: true
  getMetric:
    name: ${self:provider.stage}-get-metric
    handler: bin/getScore
    iamRoleStatementsName: get-metric-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem 
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:DYNAMODB_TABLE}'
    package:
      patterns:
        - bin/getMetric
    events:
      - http:
          path: catalog/{catalog}/owner/{owner}/name/{name}/metric/{metric}
          method: get
          cors: true
          request:
            parameters:
              paths:
                catalog: true
                owner: true
                name: true
                metric: true
     
  # queryRepositoryHandler:
  #   name: ${self:provider.stage}-query-repo-handler
  #   handler: bin/queryRepoHandler
  #   iamRoleStatementsName: query-repo-handler-role
  #   iamRoleStatements:
  #     - Effect: "Allow"
  #       Action:
  #         - dynamodb:GetItem 
  #       Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:DYNAMODB_TABLE}'
  #   package:
  #     patterns:
  #       - bin/queryRepoHandler
  #   events:
  #     - http:
  #         path: catalog/{catalog}/owner/{owner}/name/{name}
  #         method: post
  #         cors: true
  #         request:
  #           parameters:
  #             paths:
  #               catalog: true
  #               owner: true
  #               name: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"